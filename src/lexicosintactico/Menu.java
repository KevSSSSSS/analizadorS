package lexicosintactico;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public class Menu extends javax.swing.JFrame {

    //Declaracion de variables
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos Word y txt", "docx", "txt");
    File f;
    JFileChooser j = new JFileChooser();
    String data1[][] = {};
    String cabecera1[] = {"No.", " Token ", " Tipo"};
    String path;
    int cont = 0;
    int errores;
    String mensajini = "";
    String tipo = "";

    public Menu() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnTraducir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtATraducido = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        panel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        ERROR_Area = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtATexto1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        btnTraducir.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnTraducir.setText("Traducir a PROGRAMA");
        btnTraducir.setEnabled(false);
        btnTraducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraducirActionPerformed(evt);
            }
        });

        txtATraducido.setColumns(20);
        txtATraducido.setRows(5);
        jScrollPane1.setViewportView(txtATraducido);

        jButton2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Component.png"))); // NOI18N
        jButton2.setText("Análisis Sintáctico - Semántico");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ANALIZADOR SEMANTICO");
        setBackground(new java.awt.Color(255, 0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel1.setBackground(new java.awt.Color(0, 0, 51));
        panel1.setForeground(new java.awt.Color(255, 255, 255));

        jScrollPane3.setBackground(new java.awt.Color(0, 0, 153));
        jScrollPane3.setForeground(new java.awt.Color(255, 255, 255));

        tabla.setBackground(new java.awt.Color(0, 0, 153));
        tabla.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        tabla.setForeground(new java.awt.Color(255, 255, 0));
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("INGRESA EL CODIGO");
        jLabel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton1.setText("ANALIZAR CODIGO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ETIQUETAS");
        jLabel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jButton3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 0, 0));
        jButton3.setText("LIMPIAR CAMPOS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        ERROR_Area.setEditable(false);
        ERROR_Area.setBackground(new java.awt.Color(0, 0, 153));
        ERROR_Area.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        ERROR_Area.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ERROR_Area.setForeground(new java.awt.Color(204, 0, 0));
        jScrollPane5.setViewportView(ERROR_Area);

        txtATexto1.setBackground(new java.awt.Color(0, 0, 102));
        txtATexto1.setColumns(20);
        txtATexto1.setForeground(new java.awt.Color(255, 255, 0));
        txtATexto1.setRows(5);
        jScrollPane2.setViewportView(txtATexto1);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("ERRORES");
        jLabel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18))
        );

        getContentPane().add(panel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 990, 850));

        jMenu1.setText("MENU");
        jMenu1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N

        jMenu2.setText("Abrir");
        jMenu2.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N

        jMenuItem1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jMenuItem1.setText("Abrir Archivo.txt");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenu1.add(jMenu2);

        jMenuItem2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jMenuItem2.setText("Guardar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jMenuItem4.setText("Guardar Archivo");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        //Se crea un jfilechooser
        j.setCurrentDirectory(new File("src\\lexicosintactico"));
        j.getSelectedFile();
        j.setFileFilter(filtro);//Añado el filtro
        j.showOpenDialog(j);

        int contPalabra = 0;//Creo un contador para las palabras
        try {
            //Aqui se manda la ruta del archivo
            path = j.getSelectedFile().getAbsolutePath();//Obtiene la Ruta
            String name = j.getSelectedFile().getName();//Obtiene el nombre
            String lectura = "";
            f = new File(path);

            try {

                FileReader fr = new FileReader(f);
                BufferedReader br = new BufferedReader(fr);
                String aux;
                //Aqui cuento cuantas palabras hay
                StreamTokenizer st = new StreamTokenizer(new FileReader(f));
                while (st.nextToken() != StreamTokenizer.TT_EOF) {
                    if (st.ttype == StreamTokenizer.TT_WORD) {
                        contPalabra++;

                    }
                }

                //Aqui empieza a leer el archivo linea por linea hasta que en el texto ya no haya nada
                while ((aux = br.readLine()) != null) {
                    lectura = lectura + aux + "\n";//Voy acumulando todo en un string
                }
            } catch (IOException e) {
            }

            txtATexto1.setText(lectura);//Mando lo que resulto de la lectura
            int contador = 0;
            StringTokenizer st = new StringTokenizer(txtATexto1.getText(), "\n", true);
            String Text = "", token;
            contador = 1;

            while (st.hasMoreTokens()) {
                token = st.nextToken();
                if ("\n".equals(token)) {
                    contador++;
                }
            }

            for (int i = 1; i <= contador; i++) {
                Text += i + "\n";
            }
            //Lineas.setText(Text);

            //contarCaracteres(lectura);//Mando llamar el metodo de contar caracteres
            //mayusculasyminusculas(lectura);
        } catch (NullPointerException e) {

            javax.swing.JOptionPane.showMessageDialog(j, "Has seleccionado cerrar programa, saliendo...");

            System.exit(0);

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        Guardar();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        Guardarbas();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void btnTraducirActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnTraducirActionPerformed
    {//GEN-HEADEREND:event_btnTraducirActionPerformed
        txtATraducido.setText("");
        String simbolo = "([=<>])",
                id = "([(a-z)(A-Z)](\\w)*)",
                num = "((\\d)+)",
                dec = "((\\d)+(\\.)(\\d)+)",
                text = "((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)",
                send = "((\\s)*SEND(\\s)*(\\()(\\s)*((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)(\\s)*(\\))(\\s)*(;))",
                //take = "((\\s)*TAKE(\\b)(\\s)*"+id+"((\\s)*(,(\\s)*"+id+"))*(\\s)*(;))",
                take = "((\\s)*TAKE(\\s)*(\\()(\\s)*((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)(\\s)*(\\))(\\s)*(;))",
                operaciones = "((" + id + "|" + num + "|" + dec + ")(\\s)*([+-/*](\\s)*(" + id + "|" + num + "|" + dec + "))+)",
                defVal = "((\\s)*" + id + "(\\s)*=(\\s)*(" + id + "|" + text + "|" + operaciones + "|" + num + "|" + dec + ")(\\s)*(;))",
                defValVar = "((\\s)*" + id + "(\\s)*=(\\s)*(" + id + "|" + text + "|" + operaciones + "|" + num + "|" + dec + ")(\\s)*)",
                condicion = id + "(\\s)*" + simbolo + "(\\s)*(" + id + "|" + num + "|" + dec + ")((\\s)*([(&&)(||)](\\s)*" + id + "(\\s)*" + simbolo + "(\\s)*(" + id + "|" + num + "|" + dec + ")))*",
                var = "((\\s)*((NUM)|(DNUM)|(WORD))(\\b)(\\s)*(" + id + "|" + defValVar + ")((\\s)*(,(\\s)*(" + id + "|" + defValVar + ")))*(\\s)*(;))",
                main = "((\\s)*" + id + "txtATraducidoBEGIN(\\s)*(\\{)[.\\W\\w\\s]*(END(\\s)*(\\})(\\s)*)$)",
                main2 = "((\\s)*" + id + "(\\b)(\\s)*BEGIN(\\s)*(\\{))",
                main3 = "((\\s)*END(\\s)*(\\})(\\s)*)",
                start2 = "((\\s)*START(\\b)(\\s)*(" + id + "|" + num + ")(\\b)(\\s)*(=)*(" + id + "|" + num + ")(\\b)(\\s)*(STEP)(\\b)(\\s)*" + num + "(\\s)*[+-]?(\\s)*(\\b)(TO)(\\b)(\\s)*(" + id + "|" + num + ")(\\s)*(\\{))",
                foresito = "((\\s)*FOR(\\b)(\\s)*(" + id + "|" + num + ")(\\b)(\\s)*(TO)(\\b)(\\s)*(" + id + "|" + num + ")(\\s)*)",
                start3 = "((\\s)*STOP(\\s)*(\\}))",
                when2 = "((\\s)*WHEN(\\s)*(\\()(\\s)*" + condicion + "(\\s)*(\\))(\\s)*(\\{))",
                when3 = "((\\s)*SWHEN(\\s)*(\\}))",
                it2 = "((\\s)*IT(\\s)*(\\()(\\s)*" + condicion + "(\\s)*(\\))(\\s)*(\\{))",
                it3 = "((\\s)*COMPLETE(\\s)*(\\}))",
                entero = "[0-9]*",
                step = "(STEP)(\\b)(\\s)*" + num + "(\\s)*[+-]?(\\s)*(\\b)",
                to = "TO(\\b)(\\s)*(" + id + "|" + num + ")(\\s)*(\\{)",
                decimal = "[0-9]*.[0-9]+";

        StringTokenizer st = new StringTokenizer(txtATexto1.getText(), "\n");
        String token;
        while (st.hasMoreTokens()) {
            //JOptionPane.showMessageDialog(this,"Identificando Variables...");
            token = st.nextToken();

            if (token.matches(main2)) {

                String tokinn = "'";
                StringTokenizer tokin = new StringTokenizer(token, " \n");
                while (tokin.hasMoreTokens()) {
                    String testo = "";
                    testo = testo + txtATraducido.getText();
                    tokinn = tokin.nextToken();
                    if (tokinn.contains("BEGIN")) {
                        txtATraducido.setText(testo + " ");

                    }
                    if (tokinn.matches(id) && tokinn.contains("BEGIN") == false && tokinn.contains("{") == false) {
                        txtATraducido.setText(";\n " + testo + tokinn + "");
                    }
                    if (tokinn.contains("{")) {
                        txtATraducido.setText(testo + " ;\n");
                    }
                }

            }

            if (token.matches(var)) {
                String a = "";
                a = txtATraducido.getText();
                a = a + "DIM  ";
                txtATraducido.setText(a);
                String tokinn = "";
                StringTokenizer tokin = new StringTokenizer(token, " \n,;");
                while (tokin.hasMoreTokens()) {
                    String testo = "";
                    testo = testo + txtATraducido.getText();
                    tokinn = tokin.nextToken();

                    if (tokinn.contains("NUM") || tokinn.contains("DNUM") || tokinn.contains("WORD")) {
                        String enteros = "";
                        if (tokinn.contains("NUM")) {
                            enteros = " AS INTEGER";
                        }
                        if (tokinn.contains("DNUM")) {
                            enteros = " AS DOUBLE";
                        }
                        if (tokinn.contains("WORD")) {
                            enteros = " AS STRING";
                        }

                        int contador = 0;
                        while (tokin.hasMoreTokens()) {
                            tokinn = tokin.nextToken();
                            if (tokinn.equals(";")) {

                            } else {
                                if (contador >= 1) {
                                    enteros = tokinn + "," + enteros;
                                } else {
                                    enteros = tokinn + enteros;
                                }
                            }
                            contador += 1;
                        }
                        txtATraducido.setText(testo + enteros + "\n");
                    }

                }
            }

        }
        String b = txtATraducido.getText();
        b = b + "  \n";
        txtATraducido.setText(b);

        StringTokenizer st1 = new StringTokenizer(txtATexto1.getText(), "\n");
        String token1;
        while (st1.hasMoreTokens()) {
            //JOptionPane.showMessageDialog(this,"Identificando Instrucciones...");
            token1 = st1.nextToken();
            //JOptionPane.showMessageDialog(this,token1);

            /*if(token1.matches(start2))
            {

                String a=txtATraducido.getText()+"\nFOR ";
                txtATraducido.setText(a);
                StringTokenizer st2= new StringTokenizer(token1,"()");
            }*/
            if (token1.matches(start3)) {
                //JOptionPane.showMessageDialog(this,"Termina FOR");
                String a = txtATraducido.getText() + "\nNEXT\n";
                txtATraducido.setText(a);
            }
            if (token1.matches(when2)) {
                StringTokenizer st2 = new StringTokenizer(token1, "()");
                while (st2.hasMoreTokens()) { // poner primero por espacio con tokens y luego dentro de espacio hacer ciclo y hacer tokens por cada uno
                    String tuken = st2.nextToken();
                    if (tuken.contains("=") || tuken.contains("<") || tuken.contains(">")) {
                        if (tuken.contains("=")) {
                            StringTokenizer st3 = new StringTokenizer(tuken, "=");
                            while (st3.hasMoreTokens()) {
                                String tuken2 = st3.nextToken();

                                if (st3.hasMoreTokens() == true) {
                                    String a = txtATraducido.getText() + tuken2 + "=";
                                    txtATraducido.setText(a);
                                } else {
                                    String a = txtATraducido.getText() + tuken2;
                                    txtATraducido.setText(a);
                                }

                            }
                        } else {
                            String a = txtATraducido.getText() + tuken;
                            txtATraducido.setText(a);
                        }
                    }

                    if (tuken.contains("WHEN")) {
                        String a = txtATraducido.getText() + "\nWHILE ";
                        txtATraducido.setText(a);
                        /*String loqueva=a+txtATraducido.getText()+" THEN";
                        txtATraducido.setText(loqueva);*/
                    }
                    if (tuken.contains("{")) {
                        String a = txtATraducido.getText() + "\n";
                        txtATraducido.setText(a);
                    }
                }
            }
            if (token1.matches(when3)) {
                String a = txtATraducido.getText() + "\nWEND \n";
                txtATraducido.setText(a);
            }
            if (token1.matches(it2)) {
                StringTokenizer st2 = new StringTokenizer(token1, "()");
                while (st2.hasMoreTokens()) { // poner primero por espacio con tokens y luego dentro de espacio hacer ciclo y hacer tokens por cada uno
                    String tuken = st2.nextToken();
                    if (tuken.contains("=") || tuken.contains("<") || tuken.contains(">")) {
                        if (tuken.contains("=")) {
                            StringTokenizer st3 = new StringTokenizer(tuken, "=");
                            while (st3.hasMoreTokens()) {
                                String tuken2 = st3.nextToken();

                                if (st3.hasMoreTokens() == true) {
                                    String a = txtATraducido.getText() + tuken2 + "=";
                                    txtATraducido.setText(a);
                                } else {
                                    String a = txtATraducido.getText() + tuken2;
                                    txtATraducido.setText(a);
                                }

                            }
                        } else {
                            String a = txtATraducido.getText() + tuken;
                            txtATraducido.setText(a);
                        }
                    }

                    if (tuken.contains("IT")) {
                        String a = txtATraducido.getText() + "\nIF ";
                        txtATraducido.setText(a);
                        /*String loqueva=a+txtATraducido.getText()+" THEN";
                        txtATraducido.setText(loqueva);*/
                    }
                    if (tuken.contains("{")) {
                        String a = txtATraducido.getText() + " THEN\n";
                        txtATraducido.setText(a);
                    }
                }
            }
            if (token1.matches(it3)) {
                String a = txtATraducido.getText() + "\nEND IF \n";
                txtATraducido.setText(a);
            }
            if (token1.matches(main3)) {

                String c = txtATraducido.getText() + "\n";
                txtATraducido.setText(c);
            }
            if (token1.matches(take)) {
                StringTokenizer st2 = new StringTokenizer(token1, "()");
                while (st2.hasMoreTokens()) {
                    String tuken = st2.nextToken();
                    if (tuken.contains("TAKE")) {

                        String a = txtATraducido.getText() + "\nINPUT  ";
                        a = a.replace('#', '"');
                        txtATraducido.setText(a);
                    }
                    if (tuken.contains("+")) {
                        String tokesito;
                        StringTokenizer tuk = new StringTokenizer(tuken, "+");
                        while (tuk.hasMoreTokens()) {
                            tokesito = tuk.nextToken();
                            if (tuk.hasMoreTokens()) {
                                String a = txtATraducido.getText() + tokesito + ",";
                                a = a.replace('#', '"');
                                txtATraducido.setText(a);
                            } else {
                                String a = txtATraducido.getText() + tokesito;
                                a = a.replace('#', '"');

                                txtATraducido.setText(a);
                            }
                        }
                    }

                    if (tuken.contains(";")) {
                        String a = txtATraducido.getText() + "\n";
                        a = a.replace('#', '"');
                        txtATraducido.setText(a);

                    }
                    if (tuken.contains("TAKE") == false && tuken.contains("+") == false && tuken.contains(";") == false) {
                        String a = txtATraducido.getText() + tuken;
                        a = a.replace('#', '"');
                        txtATraducido.setText(a);
                    }
                }
            }
            if (token1.matches(send)) {
                StringTokenizer st2 = new StringTokenizer(token1, "()");
                while (st2.hasMoreTokens()) {
                    String tuken = st2.nextToken();
                    if (tuken.contains("SEND")) {

                        String a = txtATraducido.getText() + "\nPRINT  ";
                        a = a.replace('#', '"');

                        txtATraducido.setText(a);
                    }
                    if (tuken.contains("+")) {
                        String tokesito;
                        StringTokenizer tuk = new StringTokenizer(tuken, "+");
                        while (tuk.hasMoreTokens()) {
                            tokesito = tuk.nextToken();
                            if (tuk.hasMoreTokens()) {
                                String a = txtATraducido.getText() + tokesito + ",";
                                a = a.replace('#', '"');
                                txtATraducido.setText(a);
                            } else {
                                String a = txtATraducido.getText() + tokesito;
                                a = a.replace('#', '"');
                                txtATraducido.setText(a);
                            }
                        }
                    }

                    if (tuken.contains(";")) {
                        String a = txtATraducido.getText() + " \n";
                        a = a.replace('#', '"');
                        txtATraducido.setText(a);
                    }
                    if (tuken.contains("SEND") == false && tuken.contains("+") == false && tuken.contains(";") == false) {
                        String a = txtATraducido.getText() + tuken;
                        a = a.replace('#', '"');
                        txtATraducido.setText(a);
                    }
                }
            }

            if (token1.matches(defVal)) {
                String tokesito;
                StringTokenizer tuk = new StringTokenizer(token1);
                while (tuk.hasMoreTokens()) {
                    tokesito = tuk.nextToken();
                    String a = txtATraducido.getText() + tokesito + "\n";
                    a = a.replace(';', ' ');
                    txtATraducido.setText(a);
                }

                JOptionPane.showMessageDialog(this, "Se encontro una operación");

            }

            //ESTA COSA ES PARA EL CICLO FOR
            if (token1.matches(start2)) { //Compara si esta el matches dentro del token
                String tokesito = "";
                String texto = "";
                StringTokenizer tuk = new StringTokenizer(token1, "\\s");
                while (tuk.hasMoreTokens()) {
                    tokesito = tuk.nextToken();
                    String a = txtATraducido.getText() + "\n";//almacenoo todo
                    tokesito = tokesito.replace("START", "FOR");//reemplazo
                    tokesito = tokesito.replaceAll(step, " ");
                    tokesito = tokesito.replace("{", "\n");
                    texto += a + tokesito;//se guarda en el acumulador de lo reemplazado
                    txtATraducido.setText(texto);

                }

                JOptionPane.showMessageDialog(this, "Se encontro un ciclo for");

            }

            //CICLO FOR
        }
    }//GEN-LAST:event_btnTraducirActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        errores = 0;
        LinkedList<String> ENT = new LinkedList<>();
        LinkedList<String> DEC = new LinkedList<>();
        LinkedList<String> TEXT = new LinkedList<>();
        LinkedList<String> TAKE = new LinkedList<>();

        String simbolo = "([=<>])",
                id = "([(a-z)(A-Z)](\\w)*)",
                num = "((\\d)+)",
                dec = "((\\d)+(\\.)(\\d)+)",
                text = "((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)",
                send = "((\\s)*SEND(\\s)*(\\()(\\s)*((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)(\\s)*(\\))(\\s)*(;))",
                //take = "((\\s)*TAKE(\\b)(\\s)*"+id+"((\\s)*(,(\\s)*"+id+"))*(\\s)*(;))",
                take = "((\\s)*TAKE(\\s)*(\\()(\\s)*((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)(\\s)*(\\))(\\s)*(;))",
                operaciones = "((" + id + "|" + num + "|" + dec + ")(\\s)*([+-/*](\\s)*(" + id + "|" + num + "|" + dec + "))+)",
                defVal = "((\\s)*" + id + "(\\s)*=(\\s)*(" + id + "|" + text + "|" + operaciones + "|" + num + "|" + dec + ")(\\s)*(;))",
                defValVar = "((\\s)*" + id + "(\\s)*=(\\s)*(" + id + "|" + text + "|" + operaciones + "|" + num + "|" + dec + ")(\\s)*)",
                condicion = id + "(\\s)*" + simbolo + "(\\s)*(" + id + "|" + num + "|" + dec + ")((\\s)*([(&&)(||)](\\s)*" + id + "(\\s)*" + simbolo + "(\\s)*(" + id + "|" + num + "|" + dec + ")))*",
                var = "((\\s)*((NUM)|(DNUM)|(WORD))(\\b)(\\s)*(" + id + "|" + defValVar + ")((\\s)*(,(\\s)*(" + id + "|" + defValVar + ")))*(\\s)*(;))",
                main = "((\\s)*" + id + "(\\b)(\\s)*BEGIN(\\s)*(\\{)[.\\W\\w\\s]*(END(\\s)*(\\})(\\s)*)$)",
                main2 = "((\\s)*" + id + "(\\b)(\\s)*BEGIN(\\s)*(\\{))",
                main3 = "((\\s)*END(\\s)*(\\})(\\s)*)",
                start2 = "((\\s)*START(\\b)(\\s)*(" + id + "|" + num + ")(\\b)(\\s)*(=)*(" + id + "|" + num + ")(\\b)(\\s)*(STEP)(\\b)(\\s)*" + num + "(\\s)*[+-]?(\\s)*(\\b)(TO)(\\b)(\\s)*(" + id + "|" + num + ")(\\s)*(\\{))",
                start3 = "((\\s)*STOP(\\s)*(\\}))",
                when2 = "((\\s)*WHEN(\\s)*(\\()(\\s)*" + condicion + "(\\s)*(\\))(\\s)*(\\{))",
                when3 = "((\\s)*SWHEN(\\s)*(\\}))",
                it2 = "((\\s)*IT(\\s)*(\\()(\\s)*" + condicion + "(\\s)*(\\))(\\s)*(\\{))",
                it3 = "((\\s)*COMPLETE(\\s)*(\\}))",
                entero = "[0-9]*",
                decimal = "[0-9]*.[0-9]+";

        LinkedList<Integer> error = new LinkedList<>();
        StringTokenizer st = new StringTokenizer(txtATexto1.getText(), ";{}", true);
        String token = "", txt = "", e;
        int i = 1, mainE = 0, start = 0, when = 0, it = 0, eB = 0;
        ERROR_Area.setText("");

        if (txtATexto1.getText().matches(main)) {

            while (st.hasMoreTokens()) {
                token = st.nextToken();
                if (st.hasMoreTokens()) {
                    token = token + st.nextToken();
                }
                if (token.matches("[.\\W\\w\\s]*(\\})") && st.countTokens() == 1) {
                    String auxTok = st.nextToken();
                    token = token + (auxTok.substring(0, auxTok.indexOf("\n")));
                }
                StringTokenizer lin = new StringTokenizer(token, "\n", true);
                while (lin.hasMoreTokens()) {
                    e = lin.nextToken();
                    if ("\n".equals(e)) {
                        i++;
                    }
                }

                if (token.matches(start2)) {
                    start++;
                }
                if (token.matches(start3)) {
                    start--;
                }
                if (token.matches(when2)) {
                    when++;
                }
                if (token.matches(when3)) {
                    when--;
                }
                if (token.matches(it2)) {
                    it++;
                }
                if (token.matches(it3)) {
                    it--;
                }
                if ((st.hasMoreTokens() == false && (start > 0 || when > 0 || it > 0)) || (start < 0 || when < 0 || it < 0)) {
                    eB = 1;
                }

                if ((token.matches(send) || token.matches(take) || token.matches(var) || token.matches(defVal) || token.matches(main2) || token.matches(main3) || token.matches("(\\s)*(\\$)") || token.matches(start2) || token.matches(start3) || token.matches(when2) || token.matches(when3) || token.matches(it2) || token.matches(it3)) && eB == 0) {
                    if (token.matches(take)) {

                    }
                    if (token.matches(var)) {
                        StringTokenizer stTipo = new StringTokenizer(token, " ,;");
                        String tipo = stTipo.nextToken();

                        if (tipo.contains("NUM")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || TAKE.contains(tipo)) {
                                    ERROR_Area.setText("La Variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                    //LineaError.setText(txt + " ¡!");
                                    errores = 1;
                                    break;
                                }

                                ENT.add(tipo);
                            }
                        }
                        if (tipo.contains("DNUM")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || TAKE.contains(tipo)) {
                                    ERROR_Area.setText("La Variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                    //LineaError.setText(txt + " ¡!");
                                    errores = 1;
                                    break;
                                }

                                DEC.add(tipo);
                            }
                        }
                        if (tipo.contains("TAKE")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || TAKE.contains(tipo)) {
                                    ERROR_Area.setText("La Variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                    //LineaError.setText(txt + " ¡!");
                                    errores = 1;
                                    break;
                                }

                                TAKE.add(tipo);
                            }
                        }
                        if (tipo.contains("WORD")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || TAKE.contains(tipo)) {
                                    ERROR_Area.setText("La variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                   // LineaError.setText(txt + " ¡!");
                                    errores = 1;
                                    break;
                                }

                                TEXT.add(tipo);
                            }
                        }
                    }
                    if (token.matches(defVal)) {
                        StringTokenizer stComprobar = new StringTokenizer(token, " \n\t=;");
                        String ID = stComprobar.nextToken(), comprobar = "", tok = "";
                        //System.out.print(ID);
                        while (stComprobar.hasMoreTokens()) {
                            comprobar += stComprobar.nextToken();
                        }

                        if (ENT.contains(ID)) {
                            StringTokenizer stComprobarE = new StringTokenizer(comprobar, "+*/-");
                            while (stComprobarE.hasMoreTokens()) {
                                tok = stComprobarE.nextToken();

                                if (tok.matches(id)) {
                                    if (ENT.contains(tok)); else {
                                        ERROR_Area.setText("ERROR SEMÁNTICO (" + tok + ") " + i + ": \n"
                                                + "________________________________________________________________________\n" + token);
                                        for (int j = 1; j < i; j++) {
                                            txt += "\n";
                                        }
                                        //LineaError.setText(txt + " ¡!");
                                        errores = 1;
                                        break;
                                    }
                                } else {
                                    if (tok.matches(entero)); else {
                                        ERROR_Area.setText("ERROR SEMÁNTICO (" + tok + ") " + i + ": \n"
                                                + "________________________________________________________________________\n" + token);
                                        for (int j = 1; j < i; j++) {
                                            txt += "\n";
                                        }
                                       // LineaError.setText(txt + " ¡!");
                                        errores = 1;
                                        break;
                                    }
                                }
                            }
                        } else {
                            if (DEC.contains(ID)) {
                                StringTokenizer stComprobarD = new StringTokenizer(comprobar, "+*/-");
                                while (stComprobarD.hasMoreTokens()) {
                                    tok = stComprobarD.nextToken();

                                    if (tok.matches(id)) {
                                        if (DEC.contains(tok)); else {
                                            ERROR_Area.setText("ERROR SEMÁNTICO (" + tok + ") " + i + ": \n"
                                                    + "________________________________________________________________________\n" + token);
                                            for (int j = 1; j < i; j++) {
                                                txt += "\n";
                                            }
                                            //LineaError.setText(txt + " ¡!");
                                            errores = 1;
                                            break;
                                        }
                                    } else {
                                        if (tok.matches(decimal)); else {
                                            ERROR_Area.setText("ERROR SEMÁNTICO (" + tok + ") " + i + ": \n"
                                                    + "________________________________________________________________________\n" + token);
                                            for (int j = 1; j < i; j++) {
                                                txt += "\n";
                                            }
                                            //LineaError.setText(txt + " ¡!");
                                            errores = 1;
                                            break;
                                        }
                                    }
                                }
                            } else {
                                if (TEXT.contains(ID)) {
                                    if (comprobar.matches("((((\")[.\\W\\w\\s]*(\"))|(" + id + "))((\\s)*(\\+)((\\s)*((\")[.\\W\\w\\s]*(\"))|(" + id + ")))*)")); else {
                                        ERROR_Area.setText("ERROR SEMÁNTICO " + i + ": \n"
                                                + "________________________________________________________________________\n" + token);
                                        for (int j = 1; j < i; j++) {
                                            txt += "\n";
                                        }
                                       // LineaError.setText(txt + " ¡!");
                                        errores = 1;
                                        break;
                                    }
                                } else {
                                    ERROR_Area.setText("Variable no declarada " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                   // LineaError.setText(txt + " ¡!");
                                    errores = 1;
                                    break;
                                }
                            }
                        }
                    }
                } else {
                    if (token.contains("SEND")) {
                        txtATraducido.setText("PRINT");
                        ERROR_Area.setText("Error al declarar sentencia SEND; en la linea " + i + ": \n"
                                + "\n" + token);
                        errores = 1;
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("NUM") || token.contains("DNUM") || token.contains("WORD")) {
                        ERROR_Area.setText("Error en declaracion de variables; en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("TAKE")) {
                        ERROR_Area.setText("Error en lectura de valor TAKE  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("STOP}")) {

                        ERROR_Area.setText("Cierre de Ciclo START incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("START")) {

                        ERROR_Area.setText("Inicio de Ciclo START incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("SWHEN")) {
                        ERROR_Area.setText("Cierre de ciclo WHEN incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        break;
                    }
                    if (token.contains("WHEN")) {
                        ERROR_Area.setText("Inicio de ciclo WHEN incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("COMPLETE")) {

                        ERROR_Area.setText("Cierre de condicion IT incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("IT")) {

                        ERROR_Area.setText("Inicio de IT incorrecto; en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    } else {
                        ERROR_Area.setText("Sintaxis Erronea en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                }

            }

        } else {
            st = new StringTokenizer(txtATexto1.getText(), ";{}", true);
            while (st.hasMoreTokens()) {
                token = st.nextToken();
                if (st.hasMoreTokens()) {
                    token = token + st.nextToken();
                }
                if (token.matches("[.\\W\\w\\s]*(\\})") && st.countTokens() == 1) {
                    String auxTok = st.nextToken();
                    token = token + (auxTok.substring(0, auxTok.indexOf("\n")));
                }
                StringTokenizer lin = new StringTokenizer(token, "\n", true);
                while (lin.hasMoreTokens()) {
                    e = lin.nextToken();
                    if ("\n".equals(e)) {
                        i++;
                    }
                }
                if (eB == 1) {
                    break;
                }
                if (token.matches(start2)) {
                    start++;
                }
                if (token.matches(start3)) {
                    start--;
                }
                if (token.matches(when2)) {
                    when++;
                }
                if (token.matches(when3)) {
                    when--;
                }
                if (token.matches(it2)) {
                    it++;
                }
                if (token.matches(it3)) {
                    it--;
                }
                if ((st.hasMoreTokens() == false && (start > 0 || when > 0 || it > 0)) || (start < 0 || when < 0 || it < 0)) {
                    eB = 1;
                }

                if ((token.matches(send) || token.matches(take) || token.matches(var) || token.matches(defVal) || token.matches(main2) || token.matches(main3) || token.matches("(\\s)*(\\$)") || token.matches(start2) || token.matches(start3) || token.matches(when2) || token.matches(when3) || token.matches(it2) || token.matches(it3)) && eB == 0) {
                    ERROR_Area.setText("Compilado Exitosamente");
                    if (token.matches(main3)) {
                        eB = 1;
                    }
                } else {
                    if (token.contains("SEND")) {
                        ERROR_Area.setText("Error al declarar sentencia SEND  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("NUM") || token.contains("DNUM") || token.contains("WORD")) {
                        ERROR_Area.setText("Error en declaracion de variables  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("TAKE")) {
                        ERROR_Area.setText("Error en lectura de valor TAKE en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("STOP}")) {
                        ERROR_Area.setText("Cierre de Ciclo START incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("START")) {
                        ERROR_Area.setText("Inicio de Ciclo START incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("SWHEN")) {
                        ERROR_Area.setText("Cierre de ciclo WHEN incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("WHEN")) {
                        ERROR_Area.setText("Inicio de ciclo WHEN incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("COMPLETE")) {
                        ERROR_Area.setText("Cierre de condicion IT incorrecto; en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("IT")) {
                        ERROR_Area.setText("Inicio de IT incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    } else {
                        ERROR_Area.setText("Sintaxis Erronea en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                }
            }
            if (mainE == 0) {
                ERROR_Area.setText("Cierre de Clase incorrecto en la Linea " + i + ": \n"
                        + "\n" + token);
                for (int j = 1; j < 1; j++) {
                    txt += "\n";
                }
                //LineaError.setText(txt + " ¡!");
                errores = 1;
            }
        }
        if (errores == 1) {
            btnTraducir.setEnabled(false);
        } else {
            btnTraducir.setEnabled(true);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    public void seman() {
        errores = 0;
        LinkedList<String> ENT = new LinkedList<>();
        LinkedList<String> DEC = new LinkedList<>();
        LinkedList<String> TEXT = new LinkedList<>();
        LinkedList<String> TAKE = new LinkedList<>();

        String simbolo = "([=<>])",
                id = "([(a-z)(A-Z)](\\w)*)",
                num = "((\\d)+)",
                dec = "((\\d)+(\\.)(\\d)+)",
                text = "((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)",
                send = "((\\s)*SEND(\\s)*(\\()(\\s)*((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)(\\s)*(\\))(\\s)*(;))",
                //take = "((\\s)*TAKE(\\b)(\\s)*"+id+"((\\s)*(,(\\s)*"+id+"))*(\\s)*(;))",
                take = "((\\s)*TAKE(\\s)*(\\()(\\s)*((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)(\\s)*(\\))(\\s)*(;))",
                operaciones = "((" + id + "|" + num + "|" + dec + ")(\\s)*([+-/*](\\s)*(" + id + "|" + num + "|" + dec + "))+)",
                defVal = "((\\s)*" + id + "(\\s)*=(\\s)*(" + id + "|" + text + "|" + operaciones + "|" + num + "|" + dec + ")(\\s)*(;))",
                defValVar = "((\\s)*" + id + "(\\s)*=(\\s)*(" + id + "|" + text + "|" + operaciones + "|" + num + "|" + dec + ")(\\s)*)",
                condicion = id + "(\\s)*" + simbolo + "(\\s)*(" + id + "|" + num + "|" + dec + ")((\\s)*([(&&)(||)](\\s)*" + id + "(\\s)*" + simbolo + "(\\s)*(" + id + "|" + num + "|" + dec + ")))*",
                var = "((\\s)*((NUM)|(DNUM)|(WORD))(\\b)(\\s)*(" + id + "|" + defValVar + ")((\\s)*(,(\\s)*(" + id + "|" + defValVar + ")))*(\\s)*(;))",
                main = "((\\s)*" + id + "(\\b)(\\s)*BEGIN(\\s)*(\\{)[.\\W\\w\\s]*(END(\\s)*(\\})(\\s)*)$)",
                main2 = "((\\s)*" + id + "(\\b)(\\s)*BEGIN(\\s)*(\\{))",
                main3 = "((\\s)*END(\\s)*(\\})(\\s)*)",
                start2 = "((\\s)*START(\\b)(\\s)*(" + id + "|" + num + ")(\\b)(\\s)*(=)*(" + id + "|" + num + ")(\\b)(\\s)*(STEP)(\\b)(\\s)*" + num + "(\\s)*[+-]?(\\s)*(\\b)(TO)(\\b)(\\s)*(" + id + "|" + num + ")(\\s)*(\\{))",
                start3 = "((\\s)*STOP(\\s)*(\\}))",
                when2 = "((\\s)*WHEN(\\s)*(\\()(\\s)*" + condicion + "(\\s)*(\\))(\\s)*(\\{))",
                when3 = "((\\s)*SWHEN(\\s)*(\\}))",
                it2 = "((\\s)*IT(\\s)*(\\()(\\s)*" + condicion + "(\\s)*(\\))(\\s)*(\\{))",
                it3 = "((\\s)*COMPLETE(\\s)*(\\}))",
                entero = "[0-9]*",
                decimal = "[0-9]*.[0-9]+";

        LinkedList<Integer> error = new LinkedList<>();
        StringTokenizer st = new StringTokenizer(txtATexto1.getText(), ";{}", true);
        String token = "", txt = "", e;
        int i = 1, mainE = 0, start = 0, when = 0, it = 0, eB = 0;
        ERROR_Area.setText("");

        if (txtATexto1.getText().matches(main)) {

            while (st.hasMoreTokens()) {
                token = st.nextToken();
                if (st.hasMoreTokens()) {
                    token = token + st.nextToken();
                }
                if (token.matches("[.\\W\\w\\s]*(\\})") && st.countTokens() == 1) {
                    String auxTok = st.nextToken();
                    token = token + (auxTok.substring(0, auxTok.indexOf("\n")));
                }
                StringTokenizer lin = new StringTokenizer(token, "\n", true);
                while (lin.hasMoreTokens()) {
                    e = lin.nextToken();
                    if ("\n".equals(e)) {
                        i++;
                    }
                }

                if (token.matches(start2)) {
                    start++;
                }
                if (token.matches(start3)) {
                    start--;
                }
                if (token.matches(when2)) {
                    when++;
                }
                if (token.matches(when3)) {
                    when--;
                }
                if (token.matches(it2)) {
                    it++;
                }
                if (token.matches(it3)) {
                    it--;
                }
                if ((st.hasMoreTokens() == false && (start > 0 || when > 0 || it > 0)) || (start < 0 || when < 0 || it < 0)) {
                    eB = 1;
                }

                if ((token.matches(send) || token.matches(take) || token.matches(var) || token.matches(defVal) || token.matches(main2) || token.matches(main3) || token.matches("(\\s)*(\\$)") || token.matches(start2) || token.matches(start3) || token.matches(when2) || token.matches(when3) || token.matches(it2) || token.matches(it3)) && eB == 0) {
                    if (token.matches(take)) {

                    }
                    if (token.matches(var)) {
                        StringTokenizer stTipo = new StringTokenizer(token, " ,;");
                        String tipo = stTipo.nextToken();

                        if (tipo.contains("NUM")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || TAKE.contains(tipo)) {
                                    ERROR_Area.setText("La Variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                    //LineaError.setText(txt + " ¡!");
                                    errores = 1;
                                    break;
                                }

                                ENT.add(tipo);
                            }
                        }
                        if (tipo.contains("DNUM")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || TAKE.contains(tipo)) {
                                    ERROR_Area.setText("La Variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                   // LineaError.setText(txt + " ¡!");
                                    errores = 1;
                                    break;
                                }

                                DEC.add(tipo);
                            }
                        }
                        if (tipo.contains("TAKE")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || TAKE.contains(tipo)) {
                                    ERROR_Area.setText("La Variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                   // LineaError.setText(txt + " ¡!");
                                    errores = 1;
                                    break;
                                }

                                TAKE.add(tipo);
                            }
                        }
                        if (tipo.contains("WORD")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || TAKE.contains(tipo)) {
                                    ERROR_Area.setText("La variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                   // LineaError.setText(txt + " ¡!");
                                    errores = 1;
                                    break;
                                }

                                TEXT.add(tipo);
                            }
                        }
                    }
                    if (token.matches(defVal)) {
                        StringTokenizer stComprobar = new StringTokenizer(token, " \n\t=;");
                        String ID = stComprobar.nextToken(), comprobar = "", tok = "";
                        //System.out.print(ID);
                        while (stComprobar.hasMoreTokens()) {
                            comprobar += stComprobar.nextToken();
                        }

                        if (ENT.contains(ID)) {
                            StringTokenizer stComprobarE = new StringTokenizer(comprobar, "+*/-");
                            while (stComprobarE.hasMoreTokens()) {
                                tok = stComprobarE.nextToken();

                                if (tok.matches(id)) {
                                    if (ENT.contains(tok)); else {
                                        ERROR_Area.setText("ERROR SEMÁNTICO (" + tok + ") " + i + ": \n"
                                                + "________________________________________________________________________\n" + token);
                                        for (int j = 1; j < i; j++) {
                                            txt += "\n";
                                        }
                                       // LineaError.setText(txt + " ¡!");
                                        errores = 1;
                                        break;
                                    }
                                } else {
                                    if (tok.matches(entero)); else {
                                        ERROR_Area.setText("ERROR SEMÁNTICO (" + tok + ") " + i + ": \n"
                                                + "________________________________________________________________________\n" + token);
                                        for (int j = 1; j < i; j++) {
                                            txt += "\n";
                                        }
                                        //LineaError.setText(txt + " ¡!");
                                        errores = 1;
                                        break;
                                    }
                                }
                            }
                        } else {
                            if (DEC.contains(ID)) {
                                StringTokenizer stComprobarD = new StringTokenizer(comprobar, "+*/-");
                                while (stComprobarD.hasMoreTokens()) {
                                    tok = stComprobarD.nextToken();

                                    if (tok.matches(id)) {
                                        if (DEC.contains(tok)); else {
                                            ERROR_Area.setText("ERROR SEMÁNTICO (" + tok + ") " + i + ": \n"
                                                    + "________________________________________________________________________\n" + token);
                                            for (int j = 1; j < i; j++) {
                                                txt += "\n";
                                            }
                                           // LineaError.setText(txt + " ¡!");
                                            errores = 1;
                                            break;
                                        }
                                    } else {
                                        if (tok.matches(decimal)); else {
                                            ERROR_Area.setText("ERROR SEMÁNTICO (" + tok + ") " + i + ": \n"
                                                    + "________________________________________________________________________\n" + token);
                                            for (int j = 1; j < i; j++) {
                                                txt += "\n";
                                            }
                                           // LineaError.setText(txt + " ¡!");
                                            errores = 1;
                                            break;
                                        }
                                    }
                                }
                            } else {
                                if (TEXT.contains(ID)) {
                                    if (comprobar.matches("((((\")[.\\W\\w\\s]*(\"))|(" + id + "))((\\s)*(\\+)((\\s)*((\")[.\\W\\w\\s]*(\"))|(" + id + ")))*)")); else {
                                        ERROR_Area.setText("ERROR SEMÁNTICO " + i + ": \n"
                                                + "________________________________________________________________________\n" + token);
                                        for (int j = 1; j < i; j++) {
                                            txt += "\n";
                                        }
                                       // LineaError.setText(txt + " ¡!");
                                        errores = 1;
                                        break;
                                    }
                                } else {
                                    ERROR_Area.setText("Variable no declarada " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                    //LineaError.setText(txt + " ¡!");
                                    errores = 1;
                                    break;
                                }
                            }
                        }
                    }
                } else {
                    if (token.contains("SEND")) {
                        txtATraducido.setText("PRINT");
                        ERROR_Area.setText("Error al declarar sentencia SEND; en la linea " + i + ": \n"
                                + "\n" + token);
                        errores = 1;
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("NUM") || token.contains("DNUM") || token.contains("WORD")) {
                        ERROR_Area.setText("Error en declaracion de variables; en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                       // LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("TAKE")) {
                        ERROR_Area.setText("Error en lectura de valor TAKE  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                       // LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("STOP}")) {

                        ERROR_Area.setText("Cierre de Ciclo START incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                       // LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("START")) {

                        ERROR_Area.setText("Inicio de Ciclo START incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                       // LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("SWHEN")) {
                        ERROR_Area.setText("Cierre de ciclo WHEN incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                       // LineaError.setText(txt + " ¡!");
                        break;
                    }
                    if (token.contains("WHEN")) {
                        ERROR_Area.setText("Inicio de ciclo WHEN incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("COMPLETE")) {

                        ERROR_Area.setText("Cierre de condicion IT incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("IT")) {

                        ERROR_Area.setText("Inicio de IT incorrecto; en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                       // LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    } else {
                        ERROR_Area.setText("Sintaxis Erronea en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                }

            }

        } else {
            st = new StringTokenizer(txtATexto1.getText(), ";{}", true);
            while (st.hasMoreTokens()) {
                token = st.nextToken();
                if (st.hasMoreTokens()) {
                    token = token + st.nextToken();
                }
                if (token.matches("[.\\W\\w\\s]*(\\})") && st.countTokens() == 1) {
                    String auxTok = st.nextToken();
                    token = token + (auxTok.substring(0, auxTok.indexOf("\n")));
                }
                StringTokenizer lin = new StringTokenizer(token, "\n", true);
                while (lin.hasMoreTokens()) {
                    e = lin.nextToken();
                    if ("\n".equals(e)) {
                        i++;
                    }
                }
                if (eB == 1) {
                    break;
                }
                if (token.matches(start2)) {
                    start++;
                }
                if (token.matches(start3)) {
                    start--;
                }
                if (token.matches(when2)) {
                    when++;
                }
                if (token.matches(when3)) {
                    when--;
                }
                if (token.matches(it2)) {
                    it++;
                }
                if (token.matches(it3)) {
                    it--;
                }
                if ((st.hasMoreTokens() == false && (start > 0 || when > 0 || it > 0)) || (start < 0 || when < 0 || it < 0)) {
                    eB = 1;
                }

                if ((token.matches(send) || token.matches(take) || token.matches(var) || token.matches(defVal) || token.matches(main2) || token.matches(main3) || token.matches("(\\s)*(\\$)") || token.matches(start2) || token.matches(start3) || token.matches(when2) || token.matches(when3) || token.matches(it2) || token.matches(it3)) && eB == 0) {
                    ERROR_Area.setText("Compilado Exitosamente");
                    if (token.matches(main3)) {
                        eB = 1;
                    }
                } else {
                    if (token.contains("SEND")) {
                        ERROR_Area.setText("Error al declarar sentencia SEND  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("NUM") || token.contains("DNUM") || token.contains("WORD")) {
                        ERROR_Area.setText("Error en declaracion de variables  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("TAKE")) {
                        ERROR_Area.setText("Error en lectura de valor TAKE en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("STOP}")) {
                        ERROR_Area.setText("Cierre de Ciclo START incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("START")) {
                        ERROR_Area.setText("Inicio de Ciclo START incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("SWHEN")) {
                        ERROR_Area.setText("Cierre de ciclo WHEN incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("WHEN")) {
                        ERROR_Area.setText("Inicio de ciclo WHEN incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("COMPLETE")) {
                        ERROR_Area.setText("Cierre de condicion IT incorrecto; en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("IT")) {
                        ERROR_Area.setText("Inicio de IT incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    } else {
                        ERROR_Area.setText("Sintaxis Erronea en la linea " + i + ": \n"
                                + "\n" + token);
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        //LineaError.setText(txt + " ¡!");
                        errores = 1;
                        break;
                    }
                }
            }
            if (mainE == 0) {
                ERROR_Area.setText("Cierre de Clase incorrecto en la Linea " + i + ": \n"
                        + "\n" + token);
                for (int j = 1; j < 1; j++) {
                    txt += "\n";
                }
                //LineaError.setText(txt + " ¡!");
                errores = 1;
            }
        }
        if (errores == 1) {
            btnTraducir.setEnabled(false);
        } else {
            btnTraducir.setEnabled(true);
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
    {//GEN-HEADEREND:event_jButton3ActionPerformed
        //txtATexto1.setText("");
        //LineaError.setText("");
        ERROR_Area.setText("");
        txtATraducido.setText("");
        btnTraducir.setEnabled(false);
        eliminar();

    }//GEN-LAST:event_jButton3ActionPerformed

    public void eliminar() {
        DefaultTableModel tb = (DefaultTableModel) tabla.getModel();
        int a = tabla.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        HashMap<String, Integer> r = new HashMap<>();
        HashMap<String, Integer> operacion = new HashMap<>();
        HashMap<String, Integer> identificado = new HashMap<>();
        HashMap<String, Integer> deli = new HashMap<>();
        HashMap<String, Integer> numero = new HashMap<>();
        LinkedList<String> texto = new LinkedList<>();

        r.put("BEGIN", 0);
        r.put("END", 0);
        r.put("WORD", 0);
        r.put("ALFA", 0);
        r.put("NUM", 0);
        r.put("DNUM", 0);
        r.put("BOOL", 0);
        r.put("LNUM", 0);
        r.put("TAKE", 0);
        r.put("SEND", 0);
        r.put("WHEN", 0);
        r.put("IT", 0);
        r.put("IS", 0);
        r.put("START", 0);
        r.put("STEP", 0);
        r.put("TO", 0);
        r.put("STOP", 0);
        r.put("SWHEN", 0);
        r.put("COMPLETE", 0);

        operacion.put("/", 0);
        operacion.put("*", 0);
        operacion.put("+", 0);
        operacion.put("-", 0);
        operacion.put("=", 0);
        operacion.put("^", 0);
        operacion.put("<", 0);
        operacion.put(">", 0);
        operacion.put("||", 0);
        operacion.put("&&", 0);

        deli.put("#", 0);
        deli.put(";", 0);
        deli.put("{", 0);
        deli.put("}", 0);
        deli.put(")", 0);
        deli.put(",", 0);
        deli.put("(", 0);

        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Token", "Cantidad", "Tipo"});

        StringTokenizer st = new StringTokenizer(txtATexto1.getText(), "{}();,\"=+-*/><||&&# \n\t", true);
        String token, text = "";
        while (st.hasMoreTokens()) {
            token = st.nextToken();
            if (!" ".equals(token) && !"\n".equals(token) && !"\t".equals(token)) {
                if (r.containsKey(token)) {
                    r.put(token, r.get(token) + 1);
                } else {
                    if (operacion.containsKey(token)) {
                        operacion.put(token, operacion.get(token) + 1);
                    } else {
                        if (deli.containsKey(token)) {
                            deli.put(token, deli.get(token) + 1);
                            if ("#".equals(token)) {
                                token = st.nextToken();
                                while (st.hasMoreTokens() && !"#".equals(token)) {
                                    text += token;
                                    token = st.nextToken();
                                }
                                texto.add(text);
                                deli.put(token, deli.get(token) + 1);
                                text = "";
                            }
                        } else {
                            if (identificado.containsKey(token)) {
                                identificado.put(token, identificado.get(token) + 1);
                            } else {
                                if (token.matches("([0-9]*)|([0-9]*.[0-9]+)")) {
                                    if (numero.containsKey(token)) {
                                        numero.put(token, numero.get(token) + 1);
                                    } else {
                                        numero.put(token, 1);
                                    }
                                } else {
                                    identificado.put(token, 1);
                                }
                            }
                        }
                    }
                }
            }
        }

        Iterator<String> itr = r.keySet().iterator();
        while (itr.hasNext()) {
            token = itr.next();
            if (r.get(token) > 0) {
                model.addRow(new Object[]{token, r.get(token), "Palabra Reservada"});
            }
        }
        itr = operacion.keySet().iterator();
        while (itr.hasNext()) {
            token = itr.next();
            if (operacion.get(token) > 0) {
                model.addRow(new Object[]{token, operacion.get(token), "Operador"});
            }
        }
        itr = deli.keySet().iterator();
        while (itr.hasNext()) {
            token = itr.next();
            if (deli.get(token) > 0) {
                model.addRow(new Object[]{token, deli.get(token), "Delimitador"});
            }
        }
        itr = identificado.keySet().iterator();
        while (itr.hasNext()) {
            token = itr.next();
            if (identificado.get(token) > 0) {
                model.addRow(new Object[]{token, identificado.get(token), "Identificador"});
            }
        }
        itr = numero.keySet().iterator();
        while (itr.hasNext()) {
            token = itr.next();
            if (numero.get(token) > 0) {
                if (token.matches("[0-9]+")) {
                    model.addRow(new Object[]{token, numero.get(token), "Número"});
                }
                if (token.matches("[0-9]+.[0-9]+")) {
                    model.addRow(new Object[]{token, numero.get(token), "Número Decimal"});
                }
            }
        }
        itr = texto.iterator();
        while (itr.hasNext()) {
            model.addRow(new Object[]{itr.next(), "1", "Texto"});

        }
        tabla.setModel(model);

        seman();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    
    
    
    public void Guardar() {
        try {
            j = new JFileChooser();
            j.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filtroTxt = new FileNameExtensionFilter("Documento de Texto", "txt");
            j.setFileFilter(filtroTxt);
            j.setFileHidingEnabled(false);
            int fin = this.getTitle().lastIndexOf('.');
            if (fin == -1) {
                fin = this.getTitle().length();
            }
            j.setSelectedFile(new File(this.getTitle().substring(0, fin)));

            int select = j.showSaveDialog(this);
            File guarda = j.getSelectedFile();

            if (select == JFileChooser.APPROVE_OPTION) {
                if (guarda != null) {
                    FileWriter save = new FileWriter(guarda + ".txt");
                    save.write(txtATexto1.getText());
                    save.close();
                    JOptionPane.showMessageDialog(null, "Se ha guardado el archivo", "Información", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Su archivo no se ha guardado", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    public void Guardarbas() {
        try {
            j = new JFileChooser();

            j.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filtroTxt = new FileNameExtensionFilter("Archivos BAS", "bas");
            j.setFileFilter(filtroTxt);
            j.setFileHidingEnabled(false);
            int fin = this.getTitle().lastIndexOf('.');
            if (fin == -1) {
                fin = this.getTitle().length();
            }
            j.setSelectedFile(new File(this.getTitle().substring(0, fin)));

            int select = j.showSaveDialog(this);
            File guarda = j.getSelectedFile();

            if (select == JFileChooser.APPROVE_OPTION) {
                if (guarda != null) {
                    FileWriter save = new FileWriter(guarda + ".bas");
                    save.write(txtATraducido.getText());
                    save.close();
                    JOptionPane.showMessageDialog(null, "Se ha guardado el archivo", "Información", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Su archivo no se ha guardado", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane ERROR_Area;
    private javax.swing.JButton btnTraducir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel panel1;
    private javax.swing.JTable tabla;
    private javax.swing.JTextArea txtATexto1;
    private javax.swing.JTextArea txtATraducido;
    // End of variables declaration//GEN-END:variables
}
